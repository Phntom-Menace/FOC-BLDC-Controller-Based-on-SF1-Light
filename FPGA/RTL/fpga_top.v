/*
By: Wang Hengxin
2023.11.8
*/

module foc_controller (
    // Ê±ï¿½ÓºÍ¸ï¿½Î»ï¿½Åºï¿½ 
    input  wire         I_clk_40m,  // PLL40MHZï¿½ï¿½ï¿
    input  wire         I_rst,      // ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½Î»ï¿½Åºï¿½
    // 3ï¿½ï¿½ PWM ï¿½ÅºÅºï¿½Ê¹ï¿½ï¿½ï¿½Åºï¿½
    output wire         O_pwm_en,   // 3ï¿½à¹²ï¿½Ãµï¿½Ê¹ï¿½ï¿½ï¿½ÅºÅ£ï¿½ï¿½ï¿½ pwm_en=0 Ê±ï¿½ï¿½6ï¿½ï¿½MOSï¿½ï¿½È«ï¿½ï¿½ï¿½Ø¶Ï¡ï¿½
    output wire         O_pwm_a,    // Aï¿½ï¿½PWMï¿½ÅºÅ¡ï¿½ï¿½ï¿½ =0 Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Å±Ûµï¿½Í¨ï¿½ï¿½ï¿½ï¿½ =1 Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Å±Ûµï¿½Í¨
    output wire         O_pwm_b,    // Bï¿½ï¿½PWMï¿½ÅºÅ¡ï¿½ï¿½ï¿½ =0 Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Å±Ûµï¿½Í¨ï¿½ï¿½ï¿½ï¿½ =1 Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Å±Ûµï¿½Í¨
    output wire         O_pwm_c,    // Cï¿½ï¿½PWMï¿½ÅºÅ¡ï¿½ï¿½ï¿½ =0 Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Å±Ûµï¿½Í¨ï¿½ï¿½ï¿½ï¿½ =1 Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Å±Ûµï¿½Í¨
    // AD7928ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    output wire         O_spi_ss,
    output wire         O_spi_sck,
    output wire         O_spi_mosi,
    input  wire         I_spi_miso,
    // AS5600 ï¿½Å±ï¿½ï¿½ï¿½ï¿½ï¿½
    output wire         O_i2c_scl,
    inout               IO_i2c_sda,
	// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    input  wire         I_hall_u,
    input  wire         I_hall_v,
    input  wire         I_hall_w,
    
    // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    input  wire         I_en,                   // ï¿½ï¿½ï¿½Ê¹ï¿½ï¿½ï¿½Åºï¿
    input  wire  [5:0]  I_motor_polePair,       // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
    input  wire         I_motor_dir,            // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿Ñ¡ï¿½ï¿½uvwË³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½×ªï¿½ï¿½ï¿½ï¿Ñ¡ï¿½ï¿½uvwË³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½×ªï¿½ï¿
    input  wire         I_encoder_sel,          // Ñ¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿Ñ¡ï¿½ï¿½as5600ï¿½Å±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½1Ñ¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
    input  wire         I_encoder_dir,          // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½0Ñ¡ï¿½ï¿½Ç¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªÍ¬ï¿½ï¿Ñ¡ï¿½ï¿½Ç¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½ï¿½ï¿

    // ï¿½ï¿½ï¿½ï¿½Ä£Ê½Ñ¡ï¿½ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
    input  wire         [ 1:0]  I_control_mode,        // ï¿½Õ»ï¿½ï¿½ï¿½ï¿½ï¿½Ä£Ê½ 0ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 1ï¿½Ù¶È»ï¿½ 2Î»ï¿½Ã»ï¿½ 3ï¿½ï¿½ï¿½ï¿½
    input  wire signed  [15:0]  I_current_id_aim,      // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½dï¿½á£¨Ö±ï¿½á£©ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½ï¿½ï¿½Ö
    input  wire signed  [15:0]  I_current_iq_aim,      // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½qï¿½á£¨ï¿½ï¿½ï¿½á£©ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½ï¿½ï¿½Ö
    input  wire signed  [15:0]  I_velocity_aim,        // ï¿½Ù¶È»ï¿½Ä¿ï¿½ï¿½×ªï¿½ï¿½
    input  wire signed  [15:0]  I_position_aim,        // Î»ï¿½Ã»ï¿½Ä¿ï¿½ï¿½Ç¶ï¿
    input  wire signed  [15:0]  I_voltage_vd,          // ï¿½ï¿½ï¿½ï¿½vdï¿½ï¿½Ñ¹
    input  wire signed  [15:0]  I_voltage_vq,          // ï¿½ï¿½ï¿½ï¿½vqï¿½ï¿½Ñ¹
    // PIï¿½ï¿½Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    input  wire signed  [31:0]  I_current_id_kp,       // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½id PIï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Kp
    input  wire signed  [31:0]  I_current_id_ki,       // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½id PIï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Ki
    input  wire signed  [31:0]  I_current_id_fg,       // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½id Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Gain
    input  wire signed  [31:0]  I_current_iq_kp,       // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½iq PIï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Kp
    input  wire signed  [31:0]  I_current_iq_ki,       // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½iq PIï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Ki
    input  wire signed  [31:0]  I_current_iq_fg,       // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½iq Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Gain
    input  wire signed  [31:0]  I_velocity_kp,         // ï¿½Ù¶È»ï¿½ PIï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Kp
    input  wire signed  [31:0]  I_velocity_ki,         // ï¿½Ù¶È»ï¿½ PIï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Ki
    input  wire signed  [31:0]  I_velocity_fg,         // ï¿½Ù¶È»ï¿½ Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Gain
    input  wire signed  [31:0]  I_position_kp,         // Î»ï¿½Ã»ï¿½ PIï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Kp
    input  wire signed  [31:0]  I_position_ki,         // Î»ï¿½Ã»ï¿½ PIï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Ki
    input  wire signed  [31:0]  I_position_fg,         // Î»ï¿½Ã»ï¿½ Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Gain
    // ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    output wire              	O_init_done,            // ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿
    output wire signed  [15:0]	O_current_id,           // ï¿½ï¿½Ç°×ªï¿½ï¿½dï¿½á£¨Ö±ï¿½á£©ï¿½ï¿½Êµï¿½Êµï¿½ï¿½ï¿½Öµ
    output wire signed  [15:0]	O_current_iq,           // ï¿½ï¿½Ç°×ªï¿½ï¿½qï¿½á£¨ï¿½ï¿½ï¿½á£©ï¿½ï¿½Êµï¿½Êµï¿½ï¿½ï¿½Öµ
    output wire signed  [31:0]	O_velocity,             // ï¿½ï¿½Ç°ï¿½Ù¶ï¿½ï¿½ï¿½
    output wire signed  [31:0]	O_position,             // ï¿½ï¿½Ç°Î»ï¿½ï¿½ï¿½ï¿½
    output wire         [11:0]	O_angle_ele,            // ×ªï¿½Óµï¿½Ç¶ï¿
    output wire         [11:0]	O_angle_mec,            // ×ªï¿½Ó»ï¿½Ðµï¿½Ç¶ï¿½
    output wire         [ 2:0]	O_hall_step,            // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    output wire signed  [15:0]	O_current_ia,           // Aï¿½ï¿½ï¿½ï¿½ï¿½Ö
    output wire signed  [15:0]	O_current_ib,           // Bï¿½ï¿½ï¿½ï¿½ï¿½Ö
    output wire signed  [15:0]	O_current_ic,           // Cï¿½ï¿½ï¿½ï¿½ï¿½Ö
    output wire         [11:0]	O_voltage_vr_rho,       // ×ªï¿½Ó¼ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ÏµÄµï¿½Ñ¹Ê¸ï¿½ï¿½ï¿½Ä·ï¿½Öµ
    output wire         [11:0]	O_voltage_vr_theta,     // ×ªï¿½Ó¼ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ÏµÄµï¿½Ñ¹Ê¸ï¿½ï¿½ï¿½Ä½Ç¶ï¿½
    output wire         [11:0]	O_voltage_vs_rho,       // ï¿½ï¿½ï¿½Ó¼ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ÏµÄµï¿½Ñ¹Ê¸ï¿½ï¿½ï¿½Ä·ï¿½Öµ
    output wire         [11:0]	O_voltage_vs_theta,     // ï¿½ï¿½ï¿½Ó¼ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ÏµÄµï¿½Ñ¹Ê¸ï¿½ï¿½ï¿½Ä½Ç¶ï¿½
	output wire signed [15:0] S_current_id_aim,      	// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½dï¿½á£¨Ö±ï¿½á£©ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½ï¿½ï¿½Ö
	output wire signed [15:0] S_current_iq_aim,      	// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½qï¿½á£¨ï¿½ï¿½ï¿½á£©ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½ï¿½ï¿½Ö
	output wire signed [15:0] S_velocity_aim,        	// ï¿½Ù¶È»ï¿½Ä¿ï¿½ï¿½×ªï¿½ï¿½
	output wire signed [15:0] S_position_aim,        	// Î»ï¿½Ã»ï¿½Ä¿ï¿½ï¿½Ç¶ï¿
	output wire signed [15:0] S_voltage_vd,          	// ï¿½ï¿½ï¿½ï¿½vdï¿½ï¿½Ñ¹
	output wire signed [15:0] S_voltage_vq,          	// ï¿½ï¿½ï¿½ï¿½vqï¿½ï¿½Ñ¹
	output wire signed [31:0] O_angle_velocity,         // ï¿½ï¿½Ðµï¿½Ç¶ï¿½×ªï¿½ï¿½
    output wire signed [31:0] O_angle_position
);


wire    S_rstn;             // ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½Î»ï¿½Åºï¿½
assign  S_rstn = ~I_rst;

wire [11:0] S_hall_angle_ele;
wire [11:0] S_as5600_angle_ele;
assign O_angle_ele = I_encoder_sel ? S_hall_angle_ele : S_as5600_angle_ele; // ï¿½ï¿½Ç¶ï¿½Ñ¡ï¿½ï¿½Ê¹ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½AS5600ï¿½Å±ï¿½ï¿½ï¿½ï¿½ï¿½

wire [11:0] S_hall_angle_mec;
wire [11:0] S_as5600_angle_mec;
assign O_angle_mec = I_encoder_sel ? S_hall_angle_mec : S_as5600_angle_mec; // ï¿½ï¿½Ðµï¿½Ç¶ï¿½Ñ¡ï¿½ï¿½Ê¹ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½AS5600ï¿½Å±ï¿½ï¿½ï¿½ï¿½ï¿½

wire        S_adc_en;       // 3ï¿½ï¿½ï¿½ï¿½ï¿ADC ï¿½ï¿½ï¿½ï¿½Ê±ï¿½Ì¿ï¿½ï¿½ï¿½ï¿½ÅºÅ£ï¿½ï¿½ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½Ò»ï¿½Î²ï¿½ï¿½ï¿½Ê±ï¿½ï¿½sn_adc ï¿½Åºï¿½ï¿½Ï²ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ÚµÄ¸ßµï¿½Æ½ï¿½ï¿½ï¿½å£¬Ö¸Ê¾ADCÓ¦ï¿½Ã½ï¿½ï¿½Ð²ï¿½ï¿½ï¿½ï¿½Ë¡ï¿½
wire        S_adc_done;     // 3ï¿½ï¿½ï¿½ï¿½ï¿ADC ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ÅºÅ£ï¿½sn_adc ï¿½ï¿½ï¿½ï¿½ï¿½ßµï¿½Æ½ï¿½ï¿½ï¿½ï¿½ï¿½adc_ad7928 Ä£ï¿½é¿ªÊ¼ï¿½ï¿½ï¿½ï¿½3ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿en_adc ï¿½Åºï¿½ï¿½Ï²ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ÚµÄ¸ßµï¿½Æ½ï¿½ï¿½ï¿½å£¬Í¬Ê±ï¿½ï¿½ ADC ×ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿adc_value_a, adc_value_b, adc_value_c ï¿½Åºï¿½ï¿½Ï¡ï¿½
wire [11:0] S_adc_value_a;  // A ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ADC Ô­Ê¼Öµ
wire [11:0] S_adc_value_b;  // B ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ADC Ô­Ê¼Öµ
wire [11:0] S_adc_value_c;  // C ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ADC Ô­Ê¼Öµ

wire        S_pwm_en;   // 3ï¿½à¹²ï¿½Ãµï¿½Ê¹ï¿½ï¿½ï¿½Åºï¿½ï¿½Ð¼ï¿½ï¿½ï¿½ï¿½ï¿½


as5600_encoder u_as5600_encoder(
    .I_clk          (I_clk_40m          ),  // 40MHz Ê±ï¿½ï¿½ï¿½Åºï¿½ï¿½ï¿½ï¿½ï¿½
    .I_rst          (I_rst              ),  // ï¿½ï¿½Î»ï¿½Åºï¿½ï¿½ï¿½ï¿½ï¿½
    .I_init_done    (O_init_done        ),  // ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Åºï¿½ï¿½ï¿½ï¿½ï¿
    .I_motor_polePair(I_motor_polePair  ),  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
    .I_as5600_dir   (I_encoder_dir      ),  // AS5600ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×°ï¿½ï¿½ï¿½ï¿½
    .O_i2c_scl      (O_i2c_scl          ),  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½AS5600ï¿½ï¿½SCL
    .IO_i2c_sda     (IO_i2c_sda         ),  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½AS5600ï¿½ï¿½SDA
    .O_angle_ele    (S_as5600_angle_ele ),  // ï¿½ï¿½Ç¶ï¿½ï¿½ï¿½ï¿½
    .O_angle_mec    (S_as5600_angle_mec )   // AS5600ï¿½ï¿½È¡ï¿½ï¿½ï¿½Ä»ï¿½Ðµï¿½Ç¶ï¿½
);

//hall_encoder u_hall_encoder(
//    // Ê±ï¿½Óºï¿½ï¿½Åºï¿½ï¿½ï¿½ï¿½ï¿½
//    .I_clk          (I_clk_40m      ),	    // 40MHz Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
//    .I_rst          (I_rst          ),      // ï¿½ï¿½Î»ï¿½ï¿½ï¿½ë£¬ï¿½ï¿½ï¿½ï¿½Ð§

//    // ï¿½ï¿½ï¿½Ð²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
//    .I_init_done    (O_init_done    ),
//    .I_insert_en    (    ),      // Ê¹ï¿½Ü»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä²å²¹Æ½ï¿½ï¿½ï¿½Ë²ï¿½ï¿½ã·¨
//    .I_motor_polePair(I_motor_polePair),
//    .I_hall_dir     (I_encoder_dir  ),	    // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×°ï¿½ï¿½ï¿½ï¿½ 0ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½uvwï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½uvwï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¬ 1:ï¿½ï¿½ï¿½ï¿½uvwï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½uvwï¿½ï¿½ï¿½ï¿½ï¿½à·´
    
//    // ï¿½Åºï¿½ï¿½ï¿½ï¿½ï¿½
//    .I_hall_u       (I_hall_u       ),      // Uï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
//    .I_hall_v       (I_hall_v       ),      // Vï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
//    .I_hall_w       (I_hall_w       ),      // Wï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
    
//    // ï¿½Åºï¿½ï¿½ï¿½ï¿
//    .O_angle_ele    (S_hall_angle_ele),		// ï¿½ï¿½ï¿½×ªï¿½ÓµÄµï¿½Ç¶ï¿½
//    .O_angle_mec    (S_hall_angle_mec),		// ï¿½ï¿½ï¿½×ªï¿½ÓµÄ»ï¿½Ðµï¿½Ç¶ï¿
//    .O_connect      (               ),		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Ð§
    
//    // ï¿½Ð¼ï¿½ï¿½Åºï¿½ï¿½ï¿½ï¿
//	.S_hall_step    (O_hall_step    )		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
//);


// AD7928 ADC ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ú¶ï¿½È¡3ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î´ï¿½ï¿½ï¿½ÎºÎ´ï¿½ï¿½ï¿½ï¿½ï¿½ADCÔ­Ê¼Öµï¿½ï¿½
adc_ad7928 #(
    .CH_CNT       ( 3'd2           ), // ï¿½Ã²ï¿½ï¿½ï¿½È¡2ï¿½ï¿½Ö¸Ê¾ï¿½ï¿½ï¿½ï¿½Ö»ï¿½ï¿½Òª CH0, CH1, CH2 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¨ï¿½ï¿½ï¿½ï¿½ ADC Öµ
    .CH0          ( 3'd1           ), // Ö¸Ê¾ CH0 ï¿½ï¿½Ó¦ AD7928 ï¿½ï¿½ Í¨ï¿½ï¿½1ï¿½ï¿½ï¿½ï¿½Ó²ï¿½ï¿½ï¿½ï¿½ A ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Óµï¿AD7928 ï¿½ï¿½ Í¨ï¿½ï¿½1ï¿½ï¿½
    .CH1          ( 3'd2           ), // Ö¸Ê¾ CH1 ï¿½ï¿½Ó¦ AD7928 ï¿½ï¿½ Í¨ï¿½ï¿½2ï¿½ï¿½ï¿½ï¿½Ó²ï¿½ï¿½ï¿½ï¿½ B ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Óµï¿AD7928 ï¿½ï¿½ Í¨ï¿½ï¿½2ï¿½ï¿½
    .CH2          ( 3'd3           )  // Ö¸Ê¾ CH2 ï¿½ï¿½Ó¦ AD7928 ï¿½ï¿½ Í¨ï¿½ï¿½3ï¿½ï¿½ï¿½ï¿½Ó²ï¿½ï¿½ï¿½ï¿½ C ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Óµï¿AD7928 ï¿½ï¿½ Í¨ï¿½ï¿½3ï¿½ï¿½
) u_adc_ad7928 (
    .rstn         ( S_rstn         ),
    .clk          ( I_clk_40m      ),
    .spi_ss       ( O_spi_ss       ), // SPI ï¿½Ó¿Ú£ï¿½SS
    .spi_sck      ( O_spi_sck      ), // SPI ï¿½Ó¿Ú£ï¿½SCK
    .spi_mosi     ( O_spi_mosi     ), // SPI ï¿½Ó¿Ú£ï¿½MOSI
    .spi_miso     ( I_spi_miso     ), // SPI ï¿½Ó¿Ú£ï¿½MISO
    .i_sn_adc     ( S_adc_en       ), // input : ï¿½ï¿½ sn_adc ï¿½ï¿½ï¿½Ö¸ßµï¿½Æ½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½Ä£ï¿½é¿ªÊ¼ï¿½ï¿½ï¿½ï¿½Ò»ï¿½Î£ï¿½3Â·ï¿½Ä£ï¿½ADC ×ªï¿½ï¿½
    .o_en_adc     ( S_adc_done     ), // output: ï¿½ï¿½×ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½en_adc ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ÚµÄ¸ßµï¿½Æ½ï¿½ï¿½ï¿½ï¿½
    .o_adc_value0 ( S_adc_value_a  ), // ï¿½ï¿½ en_adc ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ÚµÄ¸ßµï¿½Æ½ï¿½ï¿½ï¿½ï¿½ï¿½Í¬Ê±ï¿½ï¿½adc_value_a ï¿½Ï³ï¿½ï¿½ï¿½ A ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿ADC Ô­Ê¼Öµ
    .o_adc_value1 ( S_adc_value_b  ), // ï¿½ï¿½ en_adc ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ÚµÄ¸ßµï¿½Æ½ï¿½ï¿½ï¿½ï¿½ï¿½Í¬Ê±ï¿½ï¿½adc_value_b ï¿½Ï³ï¿½ï¿½ï¿½ B ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿ADC Ô­Ê¼Öµ
    .o_adc_value2 ( S_adc_value_c  ), // ï¿½ï¿½ en_adc ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ÚµÄ¸ßµï¿½Æ½ï¿½ï¿½ï¿½ï¿½ï¿½Í¬Ê±ï¿½ï¿½adc_value_c ï¿½Ï³ï¿½ï¿½ï¿½ C ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿ADC Ô­Ê¼Öµ
    .o_adc_value3 (                ), // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 5 Â· ADC ×ªï¿½ï¿½ï¿½ï¿½ï¿
    .o_adc_value4 (                ), // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 5 Â· ADC ×ªï¿½ï¿½ï¿½ï¿½ï¿
    .o_adc_value5 (                ), // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 5 Â· ADC ×ªï¿½ï¿½ï¿½ï¿½ï¿
    .o_adc_value6 (                ), // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 5 Â· ADC ×ªï¿½ï¿½ï¿½ï¿½ï¿
    .o_adc_value7 (                )  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 5 Â· ADC ×ªï¿½ï¿½ï¿½ï¿½ï¿
);



// FOC + SVPWM Ä£ï¿½ï¿½ ï¿½ï¿½Ê¹ï¿½Ã·ï¿½ï¿½ï¿½ï¿½ï¿½Ô­ï¿½ï¿½ï¿½ï¿½ï¿foc_top.svï¿½ï¿½
foc_top #(
    .INIT_CYCLES  ( 20000000       ), // CLKÎª40MHzï¿½ï¿½ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½Ê±ï¿½ï¿½Î20/40=0.5s
    .MAX_AMP      ( 9'd384         ), // 384 / 512 = 0.75ï¿½ï¿½Ëµï¿½ï¿½ SVPWM ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Õ¼ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Þµï¿½ 75%
    .SAMPLE_DELAY ( 9'd120         )  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½È¡Öµï¿½ï¿½Î§0~511ï¿½ï¿½ï¿½ï¿½ï¿½Çµï¿½3ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿MOS ï¿½Ü´Ó¿ï¿½Ê¼ï¿½ï¿½Í¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È¶ï¿½ï¿½ï¿½ÒªÒ»ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ä£¬ï¿½ï¿½ï¿½Ô´ï¿½3ï¿½ï¿½ï¿½ï¿½ï¿½Å±Û¶ï¿½ï¿½ï¿½Í¨ï¿½ï¿½ï¿½ï¿½ ADC ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½Ö®ï¿½ï¿½ï¿½ï¿½ÒªÒ»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½Ã²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ë¸ï¿½ï¿½ï¿½Ê±ï¿½Ç¶ï¿½ï¿½Ù¸ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Ú£ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½Ä£ï¿½ï¿½ï¿½ï¿½ sn_adc ï¿½Åºï¿½ï¿½Ï²ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ßµï¿½Æ½ï¿½ï¿½ï¿½å£¬Ö¸Ê¾ï¿½â²¿ ADC "ï¿½ï¿½ï¿½Ô²ï¿½ï¿½ï¿½ï¿½ï¿½"
) u_foc_top (
    .rstn         ( S_rstn         ),
    .clk          ( I_clk_40m      ),
    .I_motor_polePair(I_motor_polePair),   
    .I_motor_dir(I_motor_dir),  
    .I_control_mode(I_control_mode),     
    .I_current_id_aim(I_current_id_aim),   
    .I_current_iq_aim(I_current_iq_aim),   
    .I_velocity_aim(I_velocity_aim),     
    .I_position_aim(I_position_aim),     
    .I_voltage_vd(I_voltage_vd),       
    .I_voltage_vq(I_voltage_vq),       
    .I_current_id_kp(I_current_id_kp),    
    .I_current_id_ki(I_current_id_ki),    
    .I_current_id_fg(I_current_id_fg),    
    .I_current_iq_kp(I_current_iq_kp),    
    .I_current_iq_ki(I_current_iq_ki),    
    .I_current_iq_fg(I_current_iq_fg),    
    .I_velocity_kp(I_velocity_kp),      
    .I_velocity_ki(I_velocity_ki),      
    .I_velocity_fg(I_velocity_fg),      
    .I_position_kp(I_position_kp),      
    .I_position_ki(I_position_ki),      
    .I_position_fg(I_position_fg),      
    .I_angle_ele          ( O_angle_ele), // input : ï¿½Ç¶È´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë£¨ï¿½ï¿½Ðµï¿½Ç¶È£ï¿½ï¿½ï¿½ï¿½Îªï¿½Õ£ï¿½ï¿½ï¿½È¡Öµï¿½ï¿½Î~4095ï¿½ï¿½0ï¿½ï¿½Ó¦0ï¿½ã£»1024ï¿½ï¿½Ó¦90ï¿½ã£»2048ï¿½ï¿½Ó¦180ï¿½ã£»3072ï¿½ï¿½Ó¦270ï¿½ã¡£
    .sn_adc       ( S_adc_en       ), // output: 3ï¿½ï¿½ï¿½ï¿½ï¿ADC ï¿½ï¿½ï¿½ï¿½Ê±ï¿½Ì¿ï¿½ï¿½ï¿½ï¿½ÅºÅ£ï¿½ï¿½ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½Ò»ï¿½Î²ï¿½ï¿½ï¿½Ê±ï¿½ï¿½sn_adc ï¿½Åºï¿½ï¿½Ï²ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ÚµÄ¸ßµï¿½Æ½ï¿½ï¿½ï¿½å£¬Ö¸Ê¾ADCÓ¦ï¿½Ã½ï¿½ï¿½Ð²ï¿½ï¿½ï¿½ï¿½Ë¡ï¿½
    .en_adc       ( S_adc_done     ), // input : 3ï¿½ï¿½ï¿½ï¿½ï¿ADC ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ÅºÅ£ï¿½sn_adc ï¿½ï¿½ï¿½ï¿½ï¿½ßµï¿½Æ½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â²¿ADCï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½3ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿en_adc ï¿½Åºï¿½ï¿½Ï²ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ÚµÄ¸ßµï¿½Æ½ï¿½ï¿½ï¿½å£¬Í¬Ê±ï¿½ï¿½ADC×ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿adc_a, adc_b, adc_c ï¿½Åºï¿½ï¿½ï¿½
    .adc_a        ( S_adc_value_a  ), // input : A ï¿½ï¿½ ADC ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
    .adc_b        ( S_adc_value_b  ), // input : B ï¿½ï¿½ ADC ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
    .adc_c        ( S_adc_value_c  ), // input : C ï¿½ï¿½ ADC ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
    .O_pwm_en       ( S_pwm_en       ),
    .O_pwm_a        ( O_pwm_a        ),
    .O_pwm_b        ( O_pwm_b        ),
    .O_pwm_c        ( O_pwm_c        ),
    .en_idq       (    ), // output: ï¿½ï¿½ï¿½Ö¸ßµï¿½Æ½ï¿½ï¿½ï¿½ï¿½Ê±Ëµï¿½ï¿½ id ï¿½ï¿½ iq ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½Ã¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ en_idq ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ßµï¿½Æ½ï¿½ï¿½ï¿½ï¿
    .O_current_id           ( O_current_id           ), // output: d ï¿½á£¨Ö±ï¿½á£©ï¿½ï¿½Êµï¿½Êµï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½É¸ï¿½
    .O_current_iq           ( O_current_iq           ), // output: q ï¿½á£¨ï¿½ï¿½ï¿½á£©ï¿½ï¿½Êµï¿½Êµï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½É¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ë£¬ï¿½ò¸º´ï¿½ï¿½ï¿½Ë³Ê±ï¿½ë£¬ï¿½ï¿½Ö®ï¿½ï¿½È»ï¿½ï¿½       
    .O_current_ia(O_current_ia),       
    .O_current_ib(O_current_ib),       
    .O_current_ic(O_current_ic),
    .O_init_done(O_init_done),
    .O_velocity(O_velocity),         
    .O_position(O_position),         
    .O_voltage_vr_rho(O_voltage_vr_rho),   
    .O_voltage_vr_theta(O_voltage_vr_theta) ,
    .O_voltage_vs_rho(O_voltage_vs_rho),   
    .O_voltage_vs_theta (O_voltage_vs_theta), 
	.S_current_id_aim(S_current_id_aim),      // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½dï¿½á£¨Ö±ï¿½á£©ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½ï¿½ï¿½Ö
	.S_current_iq_aim(S_current_iq_aim),      // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½qï¿½á£¨ï¿½ï¿½ï¿½á£©ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½ï¿½ï¿½Ö
	.S_velocity_aim(S_velocity_aim),        // ï¿½Ù¶È»ï¿½Ä¿ï¿½ï¿½×ªï¿½ï¿½
	.S_position_aim(S_position_aim),        // Î»ï¿½Ã»ï¿½Ä¿ï¿½ï¿½Ç¶ï¿
	.S_voltage_vd(S_voltage_vd),          // ï¿½ï¿½ï¿½ï¿½vdï¿½ï¿½Ñ¹
	.S_voltage_vq(S_voltage_vq)          // ï¿½ï¿½ï¿½ï¿½vqï¿½ï¿½Ñ¹
);

assign O_pwm_en = I_en ? S_pwm_en : 0;

// 400 ï¿½ï¿½Æµ I_clk_40m 100k
parameter [15:0] S_angle_position_clkdiv = 'd199;
reg  [15:0] S_angle_position_clkcnt;
reg         S_angle_position_clk;
always @(posedge I_clk_40m or posedge I_rst) begin
    if(I_rst) begin
        S_angle_position_clkcnt <= 'd0;
        S_angle_position_clk <= 'd0;
    end else begin
        if (S_angle_position_clkcnt < S_angle_position_clkdiv) begin
            S_angle_position_clkcnt <= S_angle_position_clkcnt + 1;
        end else begin
            S_angle_position_clkcnt <= 0;
            S_angle_position_clk <= ~S_angle_position_clk;
        end
    end
end


// Î»ï¿½Ã¼ï¿½ï¿½ï¿½
reg signed [11:0] S_angle_mec_cnt;
reg  signed [11:0] S_angle_mec_1d;

always @(posedge S_angle_position_clk or posedge I_rst) begin
    if(I_rst) begin
        S_angle_mec_1d <= 0;
		S_angle_mec_cnt <= 0;
    end else begin
//    	if(O_angle_mec != S_angle_mec_1d) begin
        	if(O_angle_mec < 'd1024 && S_angle_mec_1d > 'd3072 ) begin
//        	    S_angle_velocity_din <= $signed({4'h0, O_angle_mec}) - $signed({4'h0, S_angle_mec_1d}) + 16'd4096;
        	    S_angle_mec_cnt <= S_angle_mec_cnt + 1;
        	end else if(O_angle_mec > 'd3072 && S_angle_mec_1d < 'd1024 ) begin
//        	    S_angle_velocity_din <= $signed({4'h0, O_angle_mec}) - $signed({4'h0, S_angle_mec_1d}) - 16'd4096;
        	    S_angle_mec_cnt <= S_angle_mec_cnt - 1;
        	end else begin
//        		S_angle_velocity_din <= $signed({4'h0, O_angle_mec}) - $signed({4'h0, S_angle_mec_1d});
        	    S_angle_mec_cnt <= S_angle_mec_cnt;
        	end
        	S_angle_mec_1d <= O_angle_mec;
//		end
    end
end

assign O_angle_position = $signed({S_angle_mec_cnt, 12'h0} + O_angle_mec);


// 100 ï¿½ï¿½Æµ I_clk_40m 1k
parameter [15:0] S_angle_velocity_clkdiv = 'd19999;
reg  [15:0] S_angle_velocity_clkcnt;
reg         S_angle_velocity_clk;
always @(posedge I_clk_40m or posedge I_rst) begin
    if(I_rst) begin
        S_angle_velocity_clkcnt <= 'd0;
        S_angle_velocity_clk <= 'd0;
    end else begin
        if (S_angle_velocity_clkcnt < S_angle_velocity_clkdiv) begin
            S_angle_velocity_clkcnt <= S_angle_velocity_clkcnt + 1;
        end else begin
            S_angle_velocity_clkcnt <= 0;
            S_angle_velocity_clk <= ~S_angle_velocity_clk;
        end
    end
end

// ï¿½Ù¶È¼ï¿½ï¿½ï¿½

localparam  filter_num = 4;
reg  signed [31:0] S_angle_velocity_filter [filter_num-1:0];
//reg  signed [15:0] S_angle_velocity_din;
reg   [7:0]  S_temp_i;
reg  signed [31:0] S_angle_velocity_sum;

reg signed [31:0] S_angle_position_1d;

always @(posedge S_angle_velocity_clk or posedge I_rst) begin
    if(I_rst) begin
        S_angle_position_1d <= 0;
//        S_angle_velocity_din <= 0;
		for (S_temp_i=0; S_temp_i<filter_num-1; S_temp_i=S_temp_i+1)
			S_angle_velocity_filter[S_temp_i] <= 'h0;
    end else begin
        // O_angle_velocity <= O_angle_position - S_angle_position_1d;
        S_angle_position_1d <= O_angle_position;
       	S_angle_velocity_filter[0] <= O_angle_position - S_angle_position_1d;
       	for (S_temp_i=0; S_temp_i<filter_num-1; S_temp_i=S_temp_i+1)
       	    S_angle_velocity_filter[S_temp_i+1] <= S_angle_velocity_filter[S_temp_i];
       	S_angle_velocity_sum <= S_angle_velocity_sum + O_angle_position - S_angle_position_1d - S_angle_velocity_filter[filter_num-1]; //ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ï¿½ï¿½ï¿½Ý»ï¿½Îªï¿½ï¿½ï¿½Âµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    end
end

assign O_angle_velocity = {S_angle_velocity_sum[31], S_angle_velocity_sum[31], S_angle_velocity_sum[31:2]};
//assign O_angle_velocity = O_angle_position - S_angle_position_1d;
// assign O_angle_velocity = S_angle_velocity_din;
//assign O_angle_position = O_angle_mec;

endmodule
